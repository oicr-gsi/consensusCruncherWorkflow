## Commands
This section lists command(s) run by consensusCruncher workflow

* Running consensusCruncher

=== Description here ===.

<<<
    set -euo pipefail

    zcat READ1S_ARRAY | gzip > OUTPUT_FILE_NAME_R1_001.fastq.gz

    zcat READ2S_ARRAY | gzip > OUTPUT_FILE_NAME_R2_001.fastq.gz

  >>>
<<<
    set -euo pipefail

    CONSENSUS_CRUNCHER fastq2bam \
         --fastq1 FASTQR1 \
         --fastq2 FASTQR2 \
         --output . \
         --bwa BWA \
         --ref BWA_REF \
         --samtools SAMTOOLS \
         --skipcheck \
         --blist BLIST

    # Necessary for if bam files to be named according to merged library name
    # Additionally if ".sorted" isn't omitted here, file names from align include ".sorted" twice
    mv bamfiles/*.bam bamfiles/"OUTPUT_FILE_NAME.bam"
    mv bamfiles/*.bai bamfiles/"OUTPUT_FILE_NAME.bam.bai"
  >>>
<<<
  set -euo pipefail

   CONSENSUS_CRUNCHER consensus \
         --input INPUT_BAM \
         --output . \
         --samtools SAMTOOLS \
         --cutoff CUTOFF \
         --genome GENOME \
         --bedfile CYTOBAND \
         --bdelim '|'

   tar cf - NAME_PREFiX | gzip --no-name > CC_DIR.tar.gz
  >>>
<<<
  python3<<CODE
  import subprocess
  import sys
  inputStrings = []
  v = sep=' ' INPUT_VCFS
  vcfFiles = v.split()
  w = sep=' ' WORKFLOWS
  workflowIds = w.split()
  priority = PRIORITY
  
  if len(vcfFiles) != len(workflowIds):
      print("The arrays with input files and their respective workflow names are not of equal size!")
  else:
      for f in range(0, len(vcfFiles)):
          inputStrings.append("--variant:" + workflowIds[f] + " " + vcfFiles[f])

  javaMemory = JOB_MEMORY - 6 
  gatkCommand  = "$JAVA_ROOT/bin/java -Xmx" + str(javaMemory) + "G -jar $GATK_ROOT/GenomeAnalysisTK.jar "
  gatkCommand += "-T CombineVariants "
  gatkCommand += " ".join(inputStrings)
  gatkCommand += " -R REFERENCE_FASTA "
  gatkCommand += "-o OUTPUT_FILE_NAME_combined.vcf.gz "
  gatkCommand += "-genotypeMergeOptions PRIORITIZE "
  gatkCommand += "-priority " + priority
  gatkCommand += " 2>&1"

  result_output = subprocess.run(gatkCommand, shell=True)
  sys.exit(result_output.returncode)
  CODE
>>>
<<<
  bcftools annotate -a UNIQUE_VCF \
 -c FMT/AD,FMT/DP MERGED_VCF -Oz \
 -o "OUTPUT_FILE_NAME.merged.vcf.gz"

 tabix -p vcf "OUTPUT_FILE_NAME.merged.vcf.gz"
>>>
